Archive member included because of file (symbol)

C:/Program Files (x86)/Rowley Associates Limited/CrossWorks for ARM 2.3/lib/libc_v4t_a_le.a(libc_asm.o)
                              ARM Flash Debug/../../obj/can.o (__divsi3)

Discarded input sections

 .text          0x00000000        0x0 ARM Flash Debug/../../obj/hooks.o
 .data          0x00000000        0x0 ARM Flash Debug/../../obj/hooks.o
 .bss           0x00000000        0x0 ARM Flash Debug/../../obj/hooks.o
 .text          0x00000000        0x0 ARM Flash Debug/../../obj/main.o
 .data          0x00000000        0x0 ARM Flash Debug/../../obj/main.o
 .bss           0x00000000        0x0 ARM Flash Debug/../../obj/main.o
 .text          0x00000000        0x0 ARM Flash Debug/../../obj/extflash.o
 .data          0x00000000        0x0 ARM Flash Debug/../../obj/extflash.o
 .bss           0x00000000        0x0 ARM Flash Debug/../../obj/extflash.o
 .text          0x00000000        0x0 ARM Flash Debug/../../obj/cstart.o
 .data          0x00000000        0x0 ARM Flash Debug/../../obj/cstart.o
 .bss           0x00000000        0x0 ARM Flash Debug/../../obj/cstart.o
 .stack         0x00000000        0x0 ARM Flash Debug/../../obj/cstart.o
 .stack_abt     0x00000000        0x0 ARM Flash Debug/../../obj/cstart.o
 .stack_irq     0x00000000        0x0 ARM Flash Debug/../../obj/cstart.o
 .stack_fiq     0x00000000        0x0 ARM Flash Debug/../../obj/cstart.o
 .stack_svc     0x00000000        0x0 ARM Flash Debug/../../obj/cstart.o
 .stack_und     0x00000000        0x0 ARM Flash Debug/../../obj/cstart.o
 .heap          0x00000000        0x0 ARM Flash Debug/../../obj/cstart.o
 .text          0x00000000        0x0 ARM Flash Debug/../../obj/flash.o
 .data          0x00000000        0x0 ARM Flash Debug/../../obj/flash.o
 .bss           0x00000000        0x0 ARM Flash Debug/../../obj/flash.o
 .text          0x00000000        0x0 ARM Flash Debug/../../obj/cpu_comp.o
 .data          0x00000000        0x0 ARM Flash Debug/../../obj/cpu_comp.o
 .bss           0x00000000        0x0 ARM Flash Debug/../../obj/cpu_comp.o
 .text.CpuIrqEnable
                0x00000000       0x18 ARM Flash Debug/../../obj/cpu_comp.o
 .text          0x00000000        0x0 ARM Flash Debug/../../obj/can.o
 .data          0x00000000        0x0 ARM Flash Debug/../../obj/can.o
 .bss           0x00000000        0x0 ARM Flash Debug/../../obj/can.o
 .text          0x00000000        0x0 ARM Flash Debug/../../obj/cpu.o
 .data          0x00000000        0x0 ARM Flash Debug/../../obj/cpu.o
 .bss           0x00000000        0x0 ARM Flash Debug/../../obj/cpu.o
 .text.CpuReset
                0x00000000       0x10 ARM Flash Debug/../../obj/cpu.o
 .text          0x00000000        0x0 ARM Flash Debug/../../obj/nvm.o
 .data          0x00000000        0x0 ARM Flash Debug/../../obj/nvm.o
 .bss           0x00000000        0x0 ARM Flash Debug/../../obj/nvm.o
 .text          0x00000000        0x0 ARM Flash Debug/../../obj/timer.o
 .data          0x00000000        0x0 ARM Flash Debug/../../obj/timer.o
 .bss           0x00000000        0x0 ARM Flash Debug/../../obj/timer.o
 .text          0x00000000        0x0 ARM Flash Debug/../../obj/uart.o
 .data          0x00000000        0x0 ARM Flash Debug/../../obj/uart.o
 .bss           0x00000000        0x0 ARM Flash Debug/../../obj/uart.o
 .text          0x00000000        0x0 ARM Flash Debug/../../obj/assert.o
 .data          0x00000000        0x0 ARM Flash Debug/../../obj/assert.o
 .bss           0x00000000        0x0 ARM Flash Debug/../../obj/assert.o
 .text          0x00000000        0x0 ARM Flash Debug/../../obj/backdoor.o
 .data          0x00000000        0x0 ARM Flash Debug/../../obj/backdoor.o
 .bss           0x00000000        0x0 ARM Flash Debug/../../obj/backdoor.o
 .text          0x00000000        0x0 ARM Flash Debug/../../obj/boot.o
 .data          0x00000000        0x0 ARM Flash Debug/../../obj/boot.o
 .bss           0x00000000        0x0 ARM Flash Debug/../../obj/boot.o
 .text          0x00000000        0x0 ARM Flash Debug/../../obj/com.o
 .data          0x00000000        0x0 ARM Flash Debug/../../obj/com.o
 .bss           0x00000000        0x0 ARM Flash Debug/../../obj/com.o
 .text          0x00000000        0x0 ARM Flash Debug/../../obj/cop.o
 .data          0x00000000        0x0 ARM Flash Debug/../../obj/cop.o
 .bss           0x00000000        0x0 ARM Flash Debug/../../obj/cop.o
 .text          0x00000000        0x0 ARM Flash Debug/../../obj/xcp.o
 .data          0x00000000        0x0 ARM Flash Debug/../../obj/xcp.o
 .bss           0x00000000        0x0 ARM Flash Debug/../../obj/xcp.o
 .text.libc     0x00000000        0x0 C:/Program Files (x86)/Rowley Associates Limited/CrossWorks for ARM 2.3/lib/libc_v4t_a_le.a(libc_asm.o)
 .data.libc     0x00000000        0x0 C:/Program Files (x86)/Rowley Associates Limited/CrossWorks for ARM 2.3/lib/libc_v4t_a_le.a(libc_asm.o)
 .bss.libc      0x00000000        0x0 C:/Program Files (x86)/Rowley Associates Limited/CrossWorks for ARM 2.3/lib/libc_v4t_a_le.a(libc_asm.o)
 .text.libc._call_via_r4
                0x00000000        0x4 C:/Program Files (x86)/Rowley Associates Limited/CrossWorks for ARM 2.3/lib/libc_v4t_a_le.a(libc_asm.o)
 .text.libc._call_via_r1
                0x00000000        0x4 C:/Program Files (x86)/Rowley Associates Limited/CrossWorks for ARM 2.3/lib/libc_v4t_a_le.a(libc_asm.o)
 .text.libc._call_via_r2
                0x00000000        0x4 C:/Program Files (x86)/Rowley Associates Limited/CrossWorks for ARM 2.3/lib/libc_v4t_a_le.a(libc_asm.o)
 .text.libc._call_via_r3
                0x00000000        0x4 C:/Program Files (x86)/Rowley Associates Limited/CrossWorks for ARM 2.3/lib/libc_v4t_a_le.a(libc_asm.o)
 .text.libc._call_via_r0
                0x00000000        0x4 C:/Program Files (x86)/Rowley Associates Limited/CrossWorks for ARM 2.3/lib/libc_v4t_a_le.a(libc_asm.o)
 .text.libc._call_via_r5
                0x00000000        0x4 C:/Program Files (x86)/Rowley Associates Limited/CrossWorks for ARM 2.3/lib/libc_v4t_a_le.a(libc_asm.o)
 .text.libc._call_via_sp
                0x00000000        0x4 C:/Program Files (x86)/Rowley Associates Limited/CrossWorks for ARM 2.3/lib/libc_v4t_a_le.a(libc_asm.o)
 .text.libc._call_via_r7
                0x00000000        0x4 C:/Program Files (x86)/Rowley Associates Limited/CrossWorks for ARM 2.3/lib/libc_v4t_a_le.a(libc_asm.o)
 .text.libc._call_via_r8
                0x00000000        0x4 C:/Program Files (x86)/Rowley Associates Limited/CrossWorks for ARM 2.3/lib/libc_v4t_a_le.a(libc_asm.o)
 .text.libc._call_via_r9
                0x00000000        0x4 C:/Program Files (x86)/Rowley Associates Limited/CrossWorks for ARM 2.3/lib/libc_v4t_a_le.a(libc_asm.o)
 .text.libc._call_via_sl
                0x00000000        0x4 C:/Program Files (x86)/Rowley Associates Limited/CrossWorks for ARM 2.3/lib/libc_v4t_a_le.a(libc_asm.o)
 .text.libc._call_via_r6
                0x00000000        0x4 C:/Program Files (x86)/Rowley Associates Limited/CrossWorks for ARM 2.3/lib/libc_v4t_a_le.a(libc_asm.o)
 .text.libc._call_via_lr
                0x00000000        0x4 C:/Program Files (x86)/Rowley Associates Limited/CrossWorks for ARM 2.3/lib/libc_v4t_a_le.a(libc_asm.o)
 .text.libc._call_via_ip
                0x00000000        0x4 C:/Program Files (x86)/Rowley Associates Limited/CrossWorks for ARM 2.3/lib/libc_v4t_a_le.a(libc_asm.o)
 .text.libc._call_via_fp
                0x00000000        0x4 C:/Program Files (x86)/Rowley Associates Limited/CrossWorks for ARM 2.3/lib/libc_v4t_a_le.a(libc_asm.o)
 .text.libc.__int64_umod
                0x00000000       0x20 C:/Program Files (x86)/Rowley Associates Limited/CrossWorks for ARM 2.3/lib/libc_v4t_a_le.a(libc_asm.o)
 .text.libc.__int64_asr
                0x00000000       0x30 C:/Program Files (x86)/Rowley Associates Limited/CrossWorks for ARM 2.3/lib/libc_v4t_a_le.a(libc_asm.o)
 .text.libc.__int64_div
                0x00000000       0x60 C:/Program Files (x86)/Rowley Associates Limited/CrossWorks for ARM 2.3/lib/libc_v4t_a_le.a(libc_asm.o)
 .text.libc.__int64_lsl
                0x00000000       0x30 C:/Program Files (x86)/Rowley Associates Limited/CrossWorks for ARM 2.3/lib/libc_v4t_a_le.a(libc_asm.o)
 .text.libc.__int64_lsr
                0x00000000       0x30 C:/Program Files (x86)/Rowley Associates Limited/CrossWorks for ARM 2.3/lib/libc_v4t_a_le.a(libc_asm.o)
 .text.libc.__int64_mod
                0x00000000       0x70 C:/Program Files (x86)/Rowley Associates Limited/CrossWorks for ARM 2.3/lib/libc_v4t_a_le.a(libc_asm.o)
 .text.libc.__int64_udivmod
                0x00000000       0x90 C:/Program Files (x86)/Rowley Associates Limited/CrossWorks for ARM 2.3/lib/libc_v4t_a_le.a(libc_asm.o)
 .text.libc.__aeabi_ldivmod
                0x00000000       0x80 C:/Program Files (x86)/Rowley Associates Limited/CrossWorks for ARM 2.3/lib/libc_v4t_a_le.a(libc_asm.o)
 .text.libc.__int64_cmp
                0x00000000       0x30 C:/Program Files (x86)/Rowley Associates Limited/CrossWorks for ARM 2.3/lib/libc_v4t_a_le.a(libc_asm.o)
 .text.libc.__int64_ucmp
                0x00000000       0x30 C:/Program Files (x86)/Rowley Associates Limited/CrossWorks for ARM 2.3/lib/libc_v4t_a_le.a(libc_asm.o)
 .text.libc.muldi3
                0x00000000       0x20 C:/Program Files (x86)/Rowley Associates Limited/CrossWorks for ARM 2.3/lib/libc_v4t_a_le.a(libc_asm.o)
 .text.libc.__int32_umod
                0x00000000       0x20 C:/Program Files (x86)/Rowley Associates Limited/CrossWorks for ARM 2.3/lib/libc_v4t_a_le.a(libc_asm.o)
 .text.libc.__aeabi_uidivmod
                0x00000000       0x60 C:/Program Files (x86)/Rowley Associates Limited/CrossWorks for ARM 2.3/lib/libc_v4t_a_le.a(libc_asm.o)
 .text.libc.ctl_count_leading_zeros_32
                0x00000000       0x50 C:/Program Files (x86)/Rowley Associates Limited/CrossWorks for ARM 2.3/lib/libc_v4t_a_le.a(libc_asm.o)
 .text.libc.ctl_count_leading_zeros_16
                0x00000000       0x40 C:/Program Files (x86)/Rowley Associates Limited/CrossWorks for ARM 2.3/lib/libc_v4t_a_le.a(libc_asm.o)
 .text.libc.__gnu_thumb1_case_shi
                0x00000000       0x14 C:/Program Files (x86)/Rowley Associates Limited/CrossWorks for ARM 2.3/lib/libc_v4t_a_le.a(libc_asm.o)
 .text.libc.__gnu_thumb1_case_si
                0x00000000       0x18 C:/Program Files (x86)/Rowley Associates Limited/CrossWorks for ARM 2.3/lib/libc_v4t_a_le.a(libc_asm.o)
 .text.libc.__gnu_thumb1_case_sqi
                0x00000000       0x14 C:/Program Files (x86)/Rowley Associates Limited/CrossWorks for ARM 2.3/lib/libc_v4t_a_le.a(libc_asm.o)
 .text.libc.__gnu_thumb1_case_uhi
                0x00000000       0x14 C:/Program Files (x86)/Rowley Associates Limited/CrossWorks for ARM 2.3/lib/libc_v4t_a_le.a(libc_asm.o)
 .text.libc.__gnu_thumb1_case_uqi
                0x00000000       0x14 C:/Program Files (x86)/Rowley Associates Limited/CrossWorks for ARM 2.3/lib/libc_v4t_a_le.a(libc_asm.o)

Memory Configuration

Name             Origin             Length             Attributes
UNPLACED_SECTIONS 0xffffffff         0x00000000         xw
AHB_Peripherals  0xffe00000         0x00200000         xw
VPB_Peripherals  0xe0000000         0x00200000         xw
BANK3            0x83000000         0x01000000         xw
BANK2            0x82000000         0x01000000         xw
External_SRAM    0x81000000         0x00100000         xw
External_FLASH   0x80000000         0x00400000         xr
SRAM             0x40000200         0x00001ce0         xw
FLASH            0x00000000         0x00002000         xr
*default*        0x00000000         0xffffffff

Linker script and memory map

                0xffe00000                __AHB_Peripherals_segment_start__ = 0xffe00000
                0x00000000                __AHB_Peripherals_segment_end__ = 0x0
                0xe0000000                __VPB_Peripherals_segment_start__ = 0xe0000000
                0xe0200000                __VPB_Peripherals_segment_end__ = 0xe0200000
                0x83000000                __BANK3_segment_start__ = 0x83000000
                0x84000000                __BANK3_segment_end__ = 0x84000000
                0x82000000                __BANK2_segment_start__ = 0x82000000
                0x83000000                __BANK2_segment_end__ = 0x83000000
                0x81000000                __External_SRAM_segment_start__ = 0x81000000
                0x81100000                __External_SRAM_segment_end__ = 0x81100000
                0x80000000                __External_FLASH_segment_start__ = 0x80000000
                0x80400000                __External_FLASH_segment_end__ = 0x80400000
                0x40000200                __SRAM_segment_start__ = 0x40000200
                0x40001ee0                __SRAM_segment_end__ = 0x40001ee0
                0x00000000                __FLASH_segment_start__ = 0x0
                0x00002000                __FLASH_segment_end__ = 0x2000
                0x00000400                __STACKSIZE__ = 0x400
                0x00000100                __STACKSIZE_IRQ__ = 0x100
                0x00000100                __STACKSIZE_FIQ__ = 0x100
                0x00000000                __STACKSIZE_SVC__ = 0x0
                0x00000000                __STACKSIZE_ABT__ = 0x0
                0x00000000                __STACKSIZE_UND__ = 0x0
                0x00000400                __HEAPSIZE__ = 0x400
                0x80000000                __text2_load_start__ = ALIGN (__External_FLASH_segment_start__, 0x4)

.text2          0x80000000        0x0
                0x80000000                __text2_start__ = .
 *(.text2 .text2.*)
                0x80000000                __text2_end__ = (__text2_start__ + SIZEOF (.text2))
                0x80000000                __text2_load_end__ = __text2_end__
                0x00000001                . = ASSERT (((__text2_end__ >= __External_FLASH_segment_start__) && (__text2_end__ <= (__External_FLASH_segment_start__ + 0x400000))), error: .text2 is too large to fit in External_FLASH memory segment)
                0x80000000                __rodata2_load_start__ = ALIGN (__text2_end__, 0x4)

.rodata2        0x80000000        0x0
                0x80000000                __rodata2_start__ = .
 *(.rodata2 .rodata2.*)
                0x80000000                __rodata2_end__ = (__rodata2_start__ + SIZEOF (.rodata2))
                0x80000000                __rodata2_load_end__ = __rodata2_end__
                0x00000001                . = ASSERT (((__rodata2_end__ >= __External_FLASH_segment_start__) && (__rodata2_end__ <= (__External_FLASH_segment_start__ + 0x400000))), error: .rodata2 is too large to fit in External_FLASH memory segment)
                0x80000000                __data2_load_start__ = ALIGN (__rodata2_end__, 0x4)

.data2          0x81000000        0x0 load address 0x80000000
                0x81000000                __data2_start__ = .
 *(.data2 .data2.*)
                0x81000000                __data2_end__ = (__data2_start__ + SIZEOF (.data2))
                0x80000000                __data2_load_end__ = (__data2_load_start__ + SIZEOF (.data2))
                0x80000000                __External_FLASH_segment_used_end__ = (ALIGN (__rodata2_end__, 0x4) + SIZEOF (.data2))
                0x00000001                . = ASSERT ((((__data2_load_start__ + SIZEOF (.data2)) >= __External_FLASH_segment_start__) && ((__data2_load_start__ + SIZEOF (.data2)) <= (__External_FLASH_segment_start__ + 0x400000))), error: .data2 is too large to fit in External_FLASH memory segment)

.data2_run      0x81000000        0x0
                0x81000000                __data2_run_start__ = .
                0x81000000                . = MAX ((__data2_run_start__ + SIZEOF (.data2)), .)
                0x81000000                __data2_run_end__ = (__data2_run_start__ + SIZEOF (.data2_run))
                0x81000000                __data2_run_load_end__ = __data2_run_end__
                0x00000001                . = ASSERT (((__data2_run_end__ >= __External_SRAM_segment_start__) && (__data2_run_end__ <= (__External_SRAM_segment_start__ + 0x100000))), error: .data2_run is too large to fit in External_SRAM memory segment)
                0x81000000                __bss2_load_start__ = ALIGN (__data2_run_end__, 0x4)

.bss2           0x81000000        0x0
                0x81000000                __bss2_start__ = .
 *(.bss2 .bss2.*)
                0x81000000                __bss2_end__ = (__bss2_start__ + SIZEOF (.bss2))
                0x81000000                __bss2_load_end__ = __bss2_end__
                0x81000000                __External_SRAM_segment_used_end__ = (ALIGN (__data2_run_end__, 0x4) + SIZEOF (.bss2))
                0x00000001                . = ASSERT (((__bss2_end__ >= __External_SRAM_segment_start__) && (__bss2_end__ <= (__External_SRAM_segment_start__ + 0x100000))), error: .bss2 is too large to fit in External_SRAM memory segment)
                0x40000200                __vectors_ram_load_start__ = __SRAM_segment_start__

.vectors_ram    0x40000200       0x3c
                0x40000200                __vectors_ram_start__ = .
 *(.vectors_ram .vectors_ram.*)
                0x4000023c                . = MAX ((__vectors_ram_start__ + 0x3c), .)
 *fill*         0x40000200       0x3c 00
                0x4000023c                __vectors_ram_end__ = (__vectors_ram_start__ + SIZEOF (.vectors_ram))
                0x4000023c                __vectors_ram_load_end__ = __vectors_ram_end__
                0x00000001                . = ASSERT (((__vectors_ram_end__ >= __SRAM_segment_start__) && (__vectors_ram_end__ <= (__SRAM_segment_start__ + 0x4000))), error: .vectors_ram is too large to fit in SRAM memory segment)
                0x00000000                __vectors_load_start__ = __FLASH_segment_start__

.vectors        0x00000000       0x34
                0x00000000                __vectors_start__ = .
 *(.vectors .vectors.*)
 .vectors       0x00000000       0x34 ARM Flash Debug/../../obj/cstart.o
                0x00000000                _vectors
                0x00000034                __vectors_end__ = (__vectors_start__ + SIZEOF (.vectors))
                0x00000034                __vectors_load_end__ = __vectors_end__
                0x00000001                . = ASSERT (((__vectors_end__ >= __FLASH_segment_start__) && (__vectors_end__ <= (__FLASH_segment_start__ + 0x40000))), error: .vectors is too large to fit in FLASH memory segment)
                0x00000034                __init_load_start__ = ALIGN (__vectors_end__, 0x4)

.init           0x00000034      0x20c
                0x00000034                __init_start__ = .
 *(.init .init.*)
 *fill*         0x00000034        0xc 00
 .init          0x00000040      0x200 ARM Flash Debug/../../obj/cstart.o
                0x00000040                __start
                0x00000040                Reset_Handler
                0x00000158                exit
                0x000001b4                undef_handler
                0x000001b8                pabort_handler
                0x000001bc                dabort_handler
                0x000001c0                fiq_handler
                0x000001c4                irq_handler
                0x00000240                __init_end__ = (__init_start__ + SIZEOF (.init))
                0x00000240                __init_load_end__ = __init_end__
                0x00000001                . = ASSERT (((__init_end__ >= __FLASH_segment_start__) && (__init_end__ <= (__FLASH_segment_start__ + 0x40000))), error: .init is too large to fit in FLASH memory segment)
                0x00000240                __text_load_start__ = ALIGN (__init_end__, 0x4)

.text           0x00000240     0x1a00
                0x00000240                __text_start__ = .
 *(.text .text.* .glue_7t .glue_7 .gnu.linkonce.t.* .gcc_except_table)
 .glue_7        0x00000000        0x0 linker stubs
 .glue_7t       0x00000000        0x0 linker stubs
 .text.main     0x00000240       0xa4 ARM Flash Debug/../../obj/main.o
                0x00000240                main
 .text.FlashGetSector
                0x000002e4       0x64 ARM Flash Debug/../../obj/flash.o
 .text.FlashWriteBlock
                0x00000348      0x110 ARM Flash Debug/../../obj/flash.o
 .text.FlashInitBlock
                0x00000458       0x38 ARM Flash Debug/../../obj/flash.o
 .text.FlashSwitchBlock
                0x00000490       0x6c ARM Flash Debug/../../obj/flash.o
 .text.FlashAddToBlock
                0x000004fc       0xcc ARM Flash Debug/../../obj/flash.o
 .text.FlashInit
                0x000005c8       0x20 ARM Flash Debug/../../obj/flash.o
                0x000005c8                FlashInit
 .text.FlashWrite
                0x000005e8       0x68 ARM Flash Debug/../../obj/flash.o
                0x000005e8                FlashWrite
 .text.FlashErase
                0x00000650      0x130 ARM Flash Debug/../../obj/flash.o
                0x00000650                FlashErase
 .text.FlashWriteChecksum
                0x00000780       0x80 ARM Flash Debug/../../obj/flash.o
                0x00000780                FlashWriteChecksum
 .text.FlashVerifyChecksum
                0x00000800       0x48 ARM Flash Debug/../../obj/flash.o
                0x00000800                FlashVerifyChecksum
 .text.FlashDone
                0x00000848       0x5c ARM Flash Debug/../../obj/flash.o
                0x00000848                FlashDone
 .text.FlashGetUserProgBaseAddress
                0x000008a4        0x8 ARM Flash Debug/../../obj/flash.o
                0x000008a4                FlashGetUserProgBaseAddress
 .text.IrqGetCPSR
                0x000008ac        0x8 ARM Flash Debug/../../obj/cpu_comp.o
 .text.IrqSetCPSR
                0x000008b4        0x8 ARM Flash Debug/../../obj/cpu_comp.o
 .text.CpuIrqDisable
                0x000008bc       0x18 ARM Flash Debug/../../obj/cpu_comp.o
                0x000008bc                CpuIrqDisable
 .text.CanInit  0x000008d4       0xf8 ARM Flash Debug/../../obj/can.o
                0x000008d4                CanInit
 .text.CanTransmitPacket
                0x000009cc       0xbc ARM Flash Debug/../../obj/can.o
                0x000009cc                CanTransmitPacket
 .text.CanReceivePacket
                0x00000a88       0xa4 ARM Flash Debug/../../obj/can.o
                0x00000a88                CanReceivePacket
 .text.CpuInit  0x00000b2c       0x10 ARM Flash Debug/../../obj/cpu.o
                0x00000b2c                CpuInit
 .text.CpuMemCopy
                0x00000b3c       0x44 ARM Flash Debug/../../obj/cpu.o
                0x00000b3c                CpuMemCopy
 .text.CpuStartUserProgram
                0x00000b80       0x50 ARM Flash Debug/../../obj/cpu.o
                0x00000b80                CpuStartUserProgram
 .text.NvmInit  0x00000bd0       0x10 ARM Flash Debug/../../obj/nvm.o
                0x00000bd0                NvmInit
 .text.NvmWrite
                0x00000be0       0x10 ARM Flash Debug/../../obj/nvm.o
                0x00000be0                NvmWrite
 .text.NvmErase
                0x00000bf0       0x10 ARM Flash Debug/../../obj/nvm.o
                0x00000bf0                NvmErase
 .text.NvmVerifyChecksum
                0x00000c00       0x10 ARM Flash Debug/../../obj/nvm.o
                0x00000c00                NvmVerifyChecksum
 .text.NvmGetUserProgBaseAddress
                0x00000c10       0x10 ARM Flash Debug/../../obj/nvm.o
                0x00000c10                NvmGetUserProgBaseAddress
 .text.NvmDone  0x00000c20       0x1c ARM Flash Debug/../../obj/nvm.o
                0x00000c20                NvmDone
 .text.TimerInit
                0x00000c3c       0x48 ARM Flash Debug/../../obj/timer.o
                0x00000c3c                TimerInit
 .text.TimerReset
                0x00000c84       0x20 ARM Flash Debug/../../obj/timer.o
                0x00000c84                TimerReset
 .text.TimerUpdate
                0x00000ca4       0x38 ARM Flash Debug/../../obj/timer.o
                0x00000ca4                TimerUpdate
 .text.TimerGet
                0x00000cdc       0x1c ARM Flash Debug/../../obj/timer.o
                0x00000cdc                TimerGet
 .text.UartReceiveByte
                0x00000cf8       0x28 ARM Flash Debug/../../obj/uart.o
 .text.UartTransmitByte
                0x00000d20       0x54 ARM Flash Debug/../../obj/uart.o
 .text.UartInit
                0x00000d74       0x40 ARM Flash Debug/../../obj/uart.o
                0x00000d74                UartInit
 .text.UartTransmitPacket
                0x00000db4       0x84 ARM Flash Debug/../../obj/uart.o
                0x00000db4                UartTransmitPacket
 .text.UartReceivePacket
                0x00000e38      0x108 ARM Flash Debug/../../obj/uart.o
                0x00000e38                UartReceivePacket
 .text.AssertFailure
                0x00000f40       0x24 ARM Flash Debug/../../obj/assert.o
                0x00000f40                AssertFailure
 .text.BackDoorCheck
                0x00000f64       0x54 ARM Flash Debug/../../obj/backdoor.o
                0x00000f64                BackDoorCheck
 .text.BackDoorInit
                0x00000fb8       0x30 ARM Flash Debug/../../obj/backdoor.o
                0x00000fb8                BackDoorInit
 .text.BootInit
                0x00000fe8       0x24 ARM Flash Debug/../../obj/boot.o
                0x00000fe8                BootInit
 .text.BootTask
                0x0000100c       0x1c ARM Flash Debug/../../obj/boot.o
                0x0000100c                BootTask
 .text.ComInit  0x00001028       0x30 ARM Flash Debug/../../obj/com.o
                0x00001028                ComInit
 .text.ComTask  0x00001058       0x5c ARM Flash Debug/../../obj/com.o
                0x00001058                ComTask
 .text.ComFree  0x000010b4        0x4 ARM Flash Debug/../../obj/com.o
                0x000010b4                ComFree
 .text.ComTransmitPacket
                0x000010b8       0x4c ARM Flash Debug/../../obj/com.o
                0x000010b8                ComTransmitPacket
 .text.ComGetActiveInterfaceMaxRxLen
                0x00001104       0x38 ARM Flash Debug/../../obj/com.o
                0x00001104                ComGetActiveInterfaceMaxRxLen
 .text.ComGetActiveInterfaceMaxTxLen
                0x0000113c       0x38 ARM Flash Debug/../../obj/com.o
                0x0000113c                ComGetActiveInterfaceMaxTxLen
 .text.ComIsConnected
                0x00001174       0x10 ARM Flash Debug/../../obj/com.o
                0x00001174                ComIsConnected
 .text.CopInit  0x00001184        0x4 ARM Flash Debug/../../obj/cop.o
                0x00001184                CopInit
 .text.CopService
                0x00001188        0x4 ARM Flash Debug/../../obj/cop.o
                0x00001188                CopService
 .text.XcpProtectResources
                0x0000118c       0x14 ARM Flash Debug/../../obj/xcp.o
 .text.XcpSetCtoError
                0x000011a0       0x20 ARM Flash Debug/../../obj/xcp.o
 .text.XcpInit  0x000011c0       0x28 ARM Flash Debug/../../obj/xcp.o
                0x000011c0                XcpInit
 .text.XcpIsConnected
                0x000011e8       0x18 ARM Flash Debug/../../obj/xcp.o
                0x000011e8                XcpIsConnected
 .text.XcpPacketTransmitted
                0x00001200       0x14 ARM Flash Debug/../../obj/xcp.o
                0x00001200                XcpPacketTransmitted
 .text.XcpPacketReceived
                0x00001214      0x538 ARM Flash Debug/../../obj/xcp.o
                0x00001214                XcpPacketReceived
 *fill*         0x0000174c        0x4 00
 .text.libc.__int32_div
                0x00001750      0x470 C:/Program Files (x86)/Rowley Associates Limited/CrossWorks for ARM 2.3/lib/libc_v4t_a_le.a(libc_asm.o)
                0x00001750                __int32_div
                0x00001750                __aeabi_idiv
                0x00001750                __divsi3
                0x00001a50                __aeabi_uidiv
                0x00001a50                __uint32_div
                0x00001a50                __udivsi3
 .text.libc.__int32_mod
                0x00001bc0       0x20 C:/Program Files (x86)/Rowley Associates Limited/CrossWorks for ARM 2.3/lib/libc_v4t_a_le.a(libc_asm.o)
                0x00001bc0                __modsi3
                0x00001bc0                __int32_mod
 .text.libc.__aeabi_idivmod
                0x00001be0       0x60 C:/Program Files (x86)/Rowley Associates Limited/CrossWorks for ARM 2.3/lib/libc_v4t_a_le.a(libc_asm.o)
                0x00001be0                __aeabi_idivmod
                0x00001c40                __text_end__ = (__text_start__ + SIZEOF (.text))
                0x00001c40                __text_load_end__ = __text_end__

.vfp11_veneer   0x00000000        0x0
 .vfp11_veneer  0x00000000        0x0 linker stubs

.v4_bx          0x00000000        0x0
 .v4_bx         0x00000000        0x0 linker stubs
                0x00000001                . = ASSERT (((__text_end__ >= __FLASH_segment_start__) && (__text_end__ <= (__FLASH_segment_start__ + 0x40000))), error: .text is too large to fit in FLASH memory segment)
                0x00001c40                __dtors_load_start__ = ALIGN (__text_end__, 0x4)

.dtors          0x00001c40        0x0
                0x00001c40                __dtors_start__ = .
 *(SORT(.dtors.*))
 *(.dtors)
                0x00001c40                __dtors_end__ = (__dtors_start__ + SIZEOF (.dtors))
                0x00001c40                __dtors_load_end__ = __dtors_end__
                0x00000001                . = ASSERT (((__dtors_end__ >= __FLASH_segment_start__) && (__dtors_end__ <= (__FLASH_segment_start__ + 0x40000))), error: .dtors is too large to fit in FLASH memory segment)
                0x00001c40                __ctors_load_start__ = ALIGN (__dtors_end__, 0x4)

.ctors          0x00001c40        0x0
                0x00001c40                __ctors_start__ = .
 *(SORT(.ctors.*))
 *(.ctors)
                0x00001c40                __ctors_end__ = (__ctors_start__ + SIZEOF (.ctors))
                0x00001c40                __ctors_load_end__ = __ctors_end__
                0x00000001                . = ASSERT (((__ctors_end__ >= __FLASH_segment_start__) && (__ctors_end__ <= (__FLASH_segment_start__ + 0x40000))), error: .ctors is too large to fit in FLASH memory segment)
                0x00001c40                __rodata_load_start__ = ALIGN (__ctors_end__, 0x4)

.rodata         0x00001c40      0x250
                0x00001c40                __rodata_start__ = .
 *(.rodata .rodata.* .gnu.linkonce.r.*)
 .rodata.flashLayout
                0x00001c40       0xc0 ARM Flash Debug/../../obj/flash.o
 .rodata.str1.4
                0x00001d00       0x7d ARM Flash Debug/../../obj/can.o
                                 0x80 (size before relaxing)
 *fill*         0x00001d7d        0x3 00
 .rodata.canTiming
                0x00001d80       0x48 ARM Flash Debug/../../obj/can.o
 .rodata.str1.4
                0x00001dc8       0x80 ARM Flash Debug/../../obj/uart.o
 .rodata.xcpStationId
                0x00001e48        0x8 ARM Flash Debug/../../obj/xcp.o
 .rodata.libc.__aeabi_uidiv
                0x00001e50       0x40 C:/Program Files (x86)/Rowley Associates Limited/CrossWorks for ARM 2.3/lib/libc_v4t_a_le.a(libc_asm.o)
                0x00001e50                __RAL_uidiv_inverse_lut
                0x00001e90                __rodata_end__ = (__rodata_start__ + SIZEOF (.rodata))
                0x00001e90                __rodata_load_end__ = __rodata_end__
                0x00000001                . = ASSERT (((__rodata_end__ >= __FLASH_segment_start__) && (__rodata_end__ <= (__FLASH_segment_start__ + 0x40000))), error: .rodata is too large to fit in FLASH memory segment)
                0x00001e90                __data_load_start__ = ALIGN (__rodata_end__, 0x4)

.data           0x4000023c        0x4 load address 0x00001e90
                0x4000023c                __data_start__ = .
 *(.data .data.* .gnu.linkonce.d.*)
 .data.comActiveInterface
                0x4000023c        0x4 ARM Flash Debug/../../obj/com.o
                0x40000240                __data_end__ = (__data_start__ + SIZEOF (.data))
                0x00001e94                __data_load_end__ = (__data_load_start__ + SIZEOF (.data))
                0x00000001                . = ASSERT ((((__data_load_start__ + SIZEOF (.data)) >= __FLASH_segment_start__) && ((__data_load_start__ + SIZEOF (.data)) <= (__FLASH_segment_start__ + 0x40000))), error: .data is too large to fit in FLASH memory segment)

.data_run       0x4000023c        0x4 load address 0x00001e90
                0x4000023c                __data_run_start__ = .
                0x40000240                . = MAX ((__data_run_start__ + SIZEOF (.data)), .)
 *fill*         0x4000023c        0x4 00
                0x40000240                __data_run_end__ = (__data_run_start__ + SIZEOF (.data_run))
                0x40000240                __data_run_load_end__ = __data_run_end__
                0x00000001                . = ASSERT (((__data_run_end__ >= __SRAM_segment_start__) && (__data_run_end__ <= (__SRAM_segment_start__ + 0x4000))), error: .data_run is too large to fit in SRAM memory segment)
                0x40000240                __bss_load_start__ = ALIGN (__data_run_end__, 0x4)

.bss            0x40000240      0x4fc
                0x40000240                __bss_start__ = .
 *(.bss .bss.* .gnu.linkonce.b.*)
 .bss.bootBlockInfo
                0x40000240      0x204 ARM Flash Debug/../../obj/flash.o
 .bss.blockInfo
                0x40000444      0x204 ARM Flash Debug/../../obj/flash.o
 .bss.millisecond_counter
                0x40000648        0x4 ARM Flash Debug/../../obj/timer.o
 .bss.free_running_counter_last
                0x4000064c        0x4 ARM Flash Debug/../../obj/timer.o
 .bss.xcpCtoRxLength.897
                0x40000650        0x1 ARM Flash Debug/../../obj/uart.o
 *fill*         0x40000651        0x3 00
 .bss.xcpCtoReqPacket.896
                0x40000654       0x44 ARM Flash Debug/../../obj/uart.o
 .bss.xcpCtoRxInProgress.898
                0x40000698        0x1 ARM Flash Debug/../../obj/uart.o
 *fill*         0x40000699        0x3 00
 .bss.xcpCtoRxStartTime.899
                0x4000069c        0x4 ARM Flash Debug/../../obj/uart.o
 .bss.assert_failure_file
                0x400006a0        0x4 ARM Flash Debug/../../obj/assert.o
 .bss.assert_failure_line
                0x400006a4        0x4 ARM Flash Debug/../../obj/assert.o
 .bss.backdoorOpen
                0x400006a8        0x1 ARM Flash Debug/../../obj/backdoor.o
 *fill*         0x400006a9        0x3 00
 .bss.backdoorOpenTime
                0x400006ac        0x4 ARM Flash Debug/../../obj/backdoor.o
 .bss.xcpCtoReqPacket.891
                0x400006b0       0x40 ARM Flash Debug/../../obj/com.o
 .bss.xcpInfo   0x400006f0       0x4c ARM Flash Debug/../../obj/xcp.o
 *(COMMON)
                0x4000073c                __bss_end__ = (__bss_start__ + SIZEOF (.bss))
                0x4000073c                __bss_load_end__ = __bss_end__
                0x00000001                . = ASSERT (((__bss_end__ >= __SRAM_segment_start__) && (__bss_end__ <= (__SRAM_segment_start__ + 0x4000))), error: .bss is too large to fit in SRAM memory segment)
                0x4000073c                __non_init_load_start__ = ALIGN (__bss_end__, 0x4)

.non_init       0x4000073c        0x0
                0x4000073c                __non_init_start__ = .
 *(.non_init .non_init.*)
                0x4000073c                __non_init_end__ = (__non_init_start__ + SIZEOF (.non_init))
                0x4000073c                __non_init_load_end__ = __non_init_end__
                0x00000001                . = ASSERT (((__non_init_end__ >= __SRAM_segment_start__) && (__non_init_end__ <= (__SRAM_segment_start__ + 0x4000))), error: .non_init is too large to fit in SRAM memory segment)
                0x4000073c                __heap_load_start__ = ALIGN (__non_init_end__, 0x4)

.heap           0x4000073c      0x400
                0x4000073c                __heap_start__ = .
 *(.heap .heap.*)
                0x40000b3c                . = ALIGN (MAX ((__heap_start__ + __HEAPSIZE__), .), 0x4)
 *fill*         0x4000073c      0x400 00
                0x40000b3c                __heap_end__ = (__heap_start__ + SIZEOF (.heap))
                0x40000b3c                __heap_load_end__ = __heap_end__
                0x00000001                . = ASSERT (((__heap_end__ >= __SRAM_segment_start__) && (__heap_end__ <= (__SRAM_segment_start__ + 0x4000))), error: .heap is too large to fit in SRAM memory segment)
                0x40000b3c                __stack_load_start__ = ALIGN (__heap_end__, 0x4)

.stack          0x40000b3c      0x400
                0x40000b3c                __stack_start__ = .
 *(.stack .stack.*)
                0x40000f3c                . = ALIGN (MAX ((__stack_start__ + __STACKSIZE__), .), 0x4)
 *fill*         0x40000b3c      0x400 00
                0x40000f3c                __stack_end__ = (__stack_start__ + SIZEOF (.stack))
                0x40000f3c                __stack_load_end__ = __stack_end__
                0x00000001                . = ASSERT (((__stack_end__ >= __SRAM_segment_start__) && (__stack_end__ <= (__SRAM_segment_start__ + 0x4000))), error: .stack is too large to fit in SRAM memory segment)
                0x40000f3c                __stack_irq_load_start__ = ALIGN (__stack_end__, 0x4)

.stack_irq      0x40000f3c      0x100
                0x40000f3c                __stack_irq_start__ = .
 *(.stack_irq .stack_irq.*)
                0x4000103c                . = ALIGN (MAX ((__stack_irq_start__ + __STACKSIZE_IRQ__), .), 0x4)
 *fill*         0x40000f3c      0x100 00
                0x4000103c                __stack_irq_end__ = (__stack_irq_start__ + SIZEOF (.stack_irq))
                0x4000103c                __stack_irq_load_end__ = __stack_irq_end__
                0x00000001                . = ASSERT (((__stack_irq_end__ >= __SRAM_segment_start__) && (__stack_irq_end__ <= (__SRAM_segment_start__ + 0x4000))), error: .stack_irq is too large to fit in SRAM memory segment)
                0x4000103c                __stack_fiq_load_start__ = ALIGN (__stack_irq_end__, 0x4)

.stack_fiq      0x4000103c      0x100
                0x4000103c                __stack_fiq_start__ = .
 *(.stack_fiq .stack_fiq.*)
                0x4000113c                . = ALIGN (MAX ((__stack_fiq_start__ + __STACKSIZE_FIQ__), .), 0x4)
 *fill*         0x4000103c      0x100 00
                0x4000113c                __stack_fiq_end__ = (__stack_fiq_start__ + SIZEOF (.stack_fiq))
                0x4000113c                __stack_fiq_load_end__ = __stack_fiq_end__
                0x00000001                . = ASSERT (((__stack_fiq_end__ >= __SRAM_segment_start__) && (__stack_fiq_end__ <= (__SRAM_segment_start__ + 0x4000))), error: .stack_fiq is too large to fit in SRAM memory segment)
                0x4000113c                __stack_svc_load_start__ = ALIGN (__stack_fiq_end__, 0x4)

.stack_svc      0x4000113c        0x0
                0x4000113c                __stack_svc_start__ = .
 *(.stack_svc .stack_svc.*)
                0x4000113c                . = ALIGN (MAX ((__stack_svc_start__ + __STACKSIZE_SVC__), .), 0x4)
                0x4000113c                __stack_svc_end__ = (__stack_svc_start__ + SIZEOF (.stack_svc))
                0x4000113c                __stack_svc_load_end__ = __stack_svc_end__
                0x00000001                . = ASSERT (((__stack_svc_end__ >= __SRAM_segment_start__) && (__stack_svc_end__ <= (__SRAM_segment_start__ + 0x4000))), error: .stack_svc is too large to fit in SRAM memory segment)
                0x4000113c                __stack_abt_load_start__ = ALIGN (__stack_svc_end__, 0x4)

.stack_abt      0x4000113c        0x0
                0x4000113c                __stack_abt_start__ = .
 *(.stack_abt .stack_abt.*)
                0x4000113c                . = ALIGN (MAX ((__stack_abt_start__ + __STACKSIZE_ABT__), .), 0x4)
                0x4000113c                __stack_abt_end__ = (__stack_abt_start__ + SIZEOF (.stack_abt))
                0x4000113c                __stack_abt_load_end__ = __stack_abt_end__
                0x00000001                . = ASSERT (((__stack_abt_end__ >= __SRAM_segment_start__) && (__stack_abt_end__ <= (__SRAM_segment_start__ + 0x4000))), error: .stack_abt is too large to fit in SRAM memory segment)
                0x4000113c                __stack_und_load_start__ = ALIGN (__stack_abt_end__, 0x4)

.stack_und      0x4000113c        0x0
                0x4000113c                __stack_und_start__ = .
 *(.stack_und .stack_und.*)
                0x4000113c                . = ALIGN (MAX ((__stack_und_start__ + __STACKSIZE_UND__), .), 0x4)
                0x4000113c                __stack_und_end__ = (__stack_und_start__ + SIZEOF (.stack_und))
                0x4000113c                __stack_und_load_end__ = __stack_und_end__
                0x00000001                . = ASSERT (((__stack_und_end__ >= __SRAM_segment_start__) && (__stack_und_end__ <= (__SRAM_segment_start__ + 0x4000))), error: .stack_und is too large to fit in SRAM memory segment)
                0x00001e94                __fast_load_start__ = ALIGN ((__data_load_start__ + SIZEOF (.data)), 0x4)

.fast           0x4000113c        0x0 load address 0x00001e94
                0x4000113c                __fast_start__ = .
 *(.fast .fast.*)
                0x4000113c                __fast_end__ = (__fast_start__ + SIZEOF (.fast))
                0x00001e94                __fast_load_end__ = (__fast_load_start__ + SIZEOF (.fast))
                0x00001e94                __FLASH_segment_used_end__ = (ALIGN ((__data_load_start__ + SIZEOF (.data)), 0x4) + SIZEOF (.fast))
                0x00000001                . = ASSERT ((((__fast_load_start__ + SIZEOF (.fast)) >= __FLASH_segment_start__) && ((__fast_load_start__ + SIZEOF (.fast)) <= (__FLASH_segment_start__ + 0x40000))), error: .fast is too large to fit in FLASH memory segment)

.fast_run       0x4000113c        0x0
                0x4000113c                __fast_run_start__ = .
                0x4000113c                . = MAX ((__fast_run_start__ + SIZEOF (.fast)), .)
                0x4000113c                __fast_run_end__ = (__fast_run_start__ + SIZEOF (.fast_run))
                0x4000113c                __fast_run_load_end__ = __fast_run_end__
                0x4000113c                __SRAM_segment_used_end__ = (ALIGN (__stack_und_end__, 0x4) + SIZEOF (.fast_run))
                0x00000001                . = ASSERT (((__fast_run_end__ >= __SRAM_segment_start__) && (__fast_run_end__ <= (__SRAM_segment_start__ + 0x4000))), error: .fast_run is too large to fit in SRAM memory segment)
START GROUP
LOAD ARM Flash Debug/../../obj/hooks.o
LOAD ARM Flash Debug/../../obj/main.o
LOAD ARM Flash Debug/../../obj/extflash.o
LOAD ARM Flash Debug/../../obj/cstart.o
LOAD ARM Flash Debug/../../obj/flash.o
LOAD ARM Flash Debug/../../obj/cpu_comp.o
LOAD ARM Flash Debug/../../obj/can.o
LOAD ARM Flash Debug/../../obj/cpu.o
LOAD ARM Flash Debug/../../obj/nvm.o
LOAD ARM Flash Debug/../../obj/timer.o
LOAD ARM Flash Debug/../../obj/uart.o
LOAD ARM Flash Debug/../../obj/assert.o
LOAD ARM Flash Debug/../../obj/backdoor.o
LOAD ARM Flash Debug/../../obj/boot.o
LOAD ARM Flash Debug/../../obj/com.o
LOAD ARM Flash Debug/../../obj/cop.o
LOAD ARM Flash Debug/../../obj/xcp.o
LOAD C:/Users/voorburg/AppData/Local/Rowley Associates Limited/CrossWorks for ARM/packages/lib/liblpc2000_v4t_a_le.a
LOAD C:/Program Files (x86)/Rowley Associates Limited/CrossWorks for ARM 2.3/lib/libarm_v4t_a_le.a
LOAD C:/Program Files (x86)/Rowley Associates Limited/CrossWorks for ARM 2.3/lib/libm_v4t_a_le.a
LOAD C:/Program Files (x86)/Rowley Associates Limited/CrossWorks for ARM 2.3/lib/libc_v4t_a_le.a
LOAD C:/Program Files (x86)/Rowley Associates Limited/CrossWorks for ARM 2.3/lib/libcpp_v4t_a_le.a
LOAD C:/Program Files (x86)/Rowley Associates Limited/CrossWorks for ARM 2.3/lib/libdebugio_v4t_a_le.a
LOAD C:/Program Files (x86)/Rowley Associates Limited/CrossWorks for ARM 2.3/lib/libc_targetio_impl_v4t_a_le.a
LOAD C:/Program Files (x86)/Rowley Associates Limited/CrossWorks for ARM 2.3/lib/libc_user_libc_v4t_a_le.a
END GROUP
OUTPUT(C:/Work/software/OpenBLT/Target/Demo/ARM7_LPC2000_Olimex_LPC_L2294_Crossworks/Boot/ide/../bin/openbtl_olimex_lpc_l2294_20mhz.elf elf32-littlearm)

.debug_info     0x00000000     0x1b54
 .debug_info    0x00000000       0x5a ARM Flash Debug/../../obj/hooks.o
 .debug_info    0x0000005a      0x116 ARM Flash Debug/../../obj/main.o
 .debug_info    0x00000170       0x5a ARM Flash Debug/../../obj/extflash.o
 .debug_info    0x000001ca      0x106 ARM Flash Debug/../../obj/cstart.o
 .debug_info    0x000002d0      0x54b ARM Flash Debug/../../obj/flash.o
 .debug_info    0x0000081b      0x105 ARM Flash Debug/../../obj/cpu_comp.o
 .debug_info    0x00000920      0x201 ARM Flash Debug/../../obj/can.o
 .debug_info    0x00000b21      0x14f ARM Flash Debug/../../obj/cpu.o
 .debug_info    0x00000c70      0x177 ARM Flash Debug/../../obj/nvm.o
 .debug_info    0x00000de7       0xf2 ARM Flash Debug/../../obj/timer.o
 .debug_info    0x00000ed9      0x1e1 ARM Flash Debug/../../obj/uart.o
 .debug_info    0x000010ba       0xe4 ARM Flash Debug/../../obj/assert.o
 .debug_info    0x0000119e       0xc0 ARM Flash Debug/../../obj/backdoor.o
 .debug_info    0x0000125e       0x88 ARM Flash Debug/../../obj/boot.o
 .debug_info    0x000012e6      0x1d6 ARM Flash Debug/../../obj/com.o
 .debug_info    0x000014bc       0x86 ARM Flash Debug/../../obj/cop.o
 .debug_info    0x00001542      0x612 ARM Flash Debug/../../obj/xcp.o

.debug_abbrev   0x00000000      0xc9f
 .debug_abbrev  0x00000000       0x28 ARM Flash Debug/../../obj/hooks.o
 .debug_abbrev  0x00000028       0xc5 ARM Flash Debug/../../obj/main.o
 .debug_abbrev  0x000000ed       0x28 ARM Flash Debug/../../obj/extflash.o
 .debug_abbrev  0x00000115       0x12 ARM Flash Debug/../../obj/cstart.o
 .debug_abbrev  0x00000127      0x236 ARM Flash Debug/../../obj/flash.o
 .debug_abbrev  0x0000035d       0xbc ARM Flash Debug/../../obj/cpu_comp.o
 .debug_abbrev  0x00000419      0x164 ARM Flash Debug/../../obj/can.o
 .debug_abbrev  0x0000057d       0xaf ARM Flash Debug/../../obj/cpu.o
 .debug_abbrev  0x0000062c       0xa3 ARM Flash Debug/../../obj/nvm.o
 .debug_abbrev  0x000006cf       0x89 ARM Flash Debug/../../obj/timer.o
 .debug_abbrev  0x00000758      0x11f ARM Flash Debug/../../obj/uart.o
 .debug_abbrev  0x00000877       0x7c ARM Flash Debug/../../obj/assert.o
 .debug_abbrev  0x000008f3       0x5b ARM Flash Debug/../../obj/backdoor.o
 .debug_abbrev  0x0000094e       0x3f ARM Flash Debug/../../obj/boot.o
 .debug_abbrev  0x0000098d      0x115 ARM Flash Debug/../../obj/com.o
 .debug_abbrev  0x00000aa2       0x3f ARM Flash Debug/../../obj/cop.o
 .debug_abbrev  0x00000ae1      0x1be ARM Flash Debug/../../obj/xcp.o

.debug_line     0x00000000     0x1465
 .debug_line    0x00000000       0x1d ARM Flash Debug/../../obj/hooks.o
 .debug_line    0x0000001d      0x12f ARM Flash Debug/../../obj/main.o
 .debug_line    0x0000014c       0x1d ARM Flash Debug/../../obj/extflash.o
 .debug_line    0x00000169      0x13f ARM Flash Debug/../../obj/cstart.o
 .debug_line    0x000002a8      0x2dd ARM Flash Debug/../../obj/flash.o
 .debug_line    0x00000585      0x177 ARM Flash Debug/../../obj/cpu_comp.o
 .debug_line    0x000006fc      0x11d ARM Flash Debug/../../obj/can.o
 .debug_line    0x00000819      0x106 ARM Flash Debug/../../obj/cpu.o
 .debug_line    0x0000091f      0x11e ARM Flash Debug/../../obj/nvm.o
 .debug_line    0x00000a3d       0xfc ARM Flash Debug/../../obj/timer.o
 .debug_line    0x00000b39      0x163 ARM Flash Debug/../../obj/uart.o
 .debug_line    0x00000c9c      0x12b ARM Flash Debug/../../obj/assert.o
 .debug_line    0x00000dc7      0x147 ARM Flash Debug/../../obj/backdoor.o
 .debug_line    0x00000f0e       0xbc ARM Flash Debug/../../obj/boot.o
 .debug_line    0x00000fca      0x1c2 ARM Flash Debug/../../obj/com.o
 .debug_line    0x0000118c       0xb0 ARM Flash Debug/../../obj/cop.o
 .debug_line    0x0000123c      0x229 ARM Flash Debug/../../obj/xcp.o

.debug_str      0x00000000      0xfe4
 .debug_str     0x00000000       0xe8 ARM Flash Debug/../../obj/hooks.o
                                0x106 (size before relaxing)
 .debug_str     0x000000e8       0x9e ARM Flash Debug/../../obj/main.o
                                0x147 (size before relaxing)
 .debug_str     0x00000186       0x65 ARM Flash Debug/../../obj/extflash.o
                                0x109 (size before relaxing)
 .debug_str     0x000001eb      0x258 ARM Flash Debug/../../obj/flash.o
                                0x320 (size before relaxing)
 .debug_str     0x00000443       0xcb ARM Flash Debug/../../obj/cpu_comp.o
                                0x17a (size before relaxing)
 .debug_str     0x0000050e      0x117 ARM Flash Debug/../../obj/can.o
                                0x1e5 (size before relaxing)
 .debug_str     0x00000625       0xc9 ARM Flash Debug/../../obj/cpu.o
                                0x196 (size before relaxing)
 .debug_str     0x000006ee       0xcb ARM Flash Debug/../../obj/nvm.o
                                0x1a0 (size before relaxing)
 .debug_str     0x000007b9       0xf0 ARM Flash Debug/../../obj/timer.o
                                0x19f (size before relaxing)
 .debug_str     0x000008a9      0x12b ARM Flash Debug/../../obj/uart.o
                                0x204 (size before relaxing)
 .debug_str     0x000009d4       0xb2 ARM Flash Debug/../../obj/assert.o
                                0x16b (size before relaxing)
 .debug_str     0x00000a86       0xae ARM Flash Debug/../../obj/backdoor.o
                                0x166 (size before relaxing)
 .debug_str     0x00000b34       0x83 ARM Flash Debug/../../obj/boot.o
                                0x127 (size before relaxing)
 .debug_str     0x00000bb7      0x142 ARM Flash Debug/../../obj/com.o
                                0x220 (size before relaxing)
 .debug_str     0x00000cf9       0x83 ARM Flash Debug/../../obj/cop.o
                                0x127 (size before relaxing)
 .debug_str     0x00000d7c      0x268 ARM Flash Debug/../../obj/xcp.o
                                0x349 (size before relaxing)

.comment        0x00000000       0x4e
 .comment       0x00000000       0x4e ARM Flash Debug/../../obj/hooks.o
                                 0x4f (size before relaxing)
 .comment       0x00000000       0x4f ARM Flash Debug/../../obj/main.o
 .comment       0x00000000       0x4f ARM Flash Debug/../../obj/extflash.o
 .comment       0x00000000       0x4f ARM Flash Debug/../../obj/flash.o
 .comment       0x00000000       0x4f ARM Flash Debug/../../obj/cpu_comp.o
 .comment       0x00000000       0x4f ARM Flash Debug/../../obj/can.o
 .comment       0x00000000       0x4f ARM Flash Debug/../../obj/cpu.o
 .comment       0x00000000       0x4f ARM Flash Debug/../../obj/nvm.o
 .comment       0x00000000       0x4f ARM Flash Debug/../../obj/timer.o
 .comment       0x00000000       0x4f ARM Flash Debug/../../obj/uart.o
 .comment       0x00000000       0x4f ARM Flash Debug/../../obj/assert.o
 .comment       0x00000000       0x4f ARM Flash Debug/../../obj/backdoor.o
 .comment       0x00000000       0x4f ARM Flash Debug/../../obj/boot.o
 .comment       0x00000000       0x4f ARM Flash Debug/../../obj/com.o
 .comment       0x00000000       0x4f ARM Flash Debug/../../obj/cop.o
 .comment       0x00000000       0x4f ARM Flash Debug/../../obj/xcp.o

.ARM.attributes
                0x00000000       0x10
 .ARM.attributes
                0x00000000       0x10 ARM Flash Debug/../../obj/hooks.o
 .ARM.attributes
                0x00000010       0x10 ARM Flash Debug/../../obj/main.o
 .ARM.attributes
                0x00000020       0x10 ARM Flash Debug/../../obj/extflash.o
 .ARM.attributes
                0x00000030       0x10 ARM Flash Debug/../../obj/cstart.o
 .ARM.attributes
                0x00000040       0x10 ARM Flash Debug/../../obj/flash.o
 .ARM.attributes
                0x00000050       0x10 ARM Flash Debug/../../obj/cpu_comp.o
 .ARM.attributes
                0x00000060       0x10 ARM Flash Debug/../../obj/can.o
 .ARM.attributes
                0x00000070       0x10 ARM Flash Debug/../../obj/cpu.o
 .ARM.attributes
                0x00000080       0x10 ARM Flash Debug/../../obj/nvm.o
 .ARM.attributes
                0x00000090       0x10 ARM Flash Debug/../../obj/timer.o
 .ARM.attributes
                0x000000a0       0x10 ARM Flash Debug/../../obj/uart.o
 .ARM.attributes
                0x000000b0       0x10 ARM Flash Debug/../../obj/assert.o
 .ARM.attributes
                0x000000c0       0x10 ARM Flash Debug/../../obj/backdoor.o
 .ARM.attributes
                0x000000d0       0x10 ARM Flash Debug/../../obj/boot.o
 .ARM.attributes
                0x000000e0       0x10 ARM Flash Debug/../../obj/com.o
 .ARM.attributes
                0x000000f0       0x10 ARM Flash Debug/../../obj/cop.o
 .ARM.attributes
                0x00000100       0x10 ARM Flash Debug/../../obj/xcp.o
 .ARM.attributes
                0x00000110       0x10 C:/Program Files (x86)/Rowley Associates Limited/CrossWorks for ARM 2.3/lib/libc_v4t_a_le.a(libc_asm.o)

.debug_frame    0x00000000      0x910
 .debug_frame   0x00000000       0x2c ARM Flash Debug/../../obj/main.o
 .debug_frame   0x0000002c      0x16c ARM Flash Debug/../../obj/flash.o
 .debug_frame   0x00000198       0x68 ARM Flash Debug/../../obj/cpu_comp.o
 .debug_frame   0x00000200       0x68 ARM Flash Debug/../../obj/can.o
 .debug_frame   0x00000268       0x84 ARM Flash Debug/../../obj/cpu.o
 .debug_frame   0x000002ec       0xb8 ARM Flash Debug/../../obj/nvm.o
 .debug_frame   0x000003a4       0x5c ARM Flash Debug/../../obj/timer.o
 .debug_frame   0x00000400       0x90 ARM Flash Debug/../../obj/uart.o
 .debug_frame   0x00000490       0x2c ARM Flash Debug/../../obj/assert.o
 .debug_frame   0x000004bc       0x48 ARM Flash Debug/../../obj/backdoor.o
 .debug_frame   0x00000504       0x48 ARM Flash Debug/../../obj/boot.o
 .debug_frame   0x0000054c       0xb4 ARM Flash Debug/../../obj/com.o
 .debug_frame   0x00000600       0x30 ARM Flash Debug/../../obj/cop.o
 .debug_frame   0x00000630       0x80 ARM Flash Debug/../../obj/xcp.o
 .debug_frame   0x000006b0      0x260 C:/Program Files (x86)/Rowley Associates Limited/CrossWorks for ARM 2.3/lib/libc_v4t_a_le.a(libc_asm.o)

.debug_loc      0x00000000      0xd40
 .debug_loc     0x00000000       0x20 ARM Flash Debug/../../obj/main.o
 .debug_loc     0x00000020      0x4b6 ARM Flash Debug/../../obj/flash.o
 .debug_loc     0x000004d6       0x66 ARM Flash Debug/../../obj/cpu_comp.o
 .debug_loc     0x0000053c       0xcf ARM Flash Debug/../../obj/can.o
 .debug_loc     0x0000060b      0x129 ARM Flash Debug/../../obj/cpu.o
 .debug_loc     0x00000734      0x11f ARM Flash Debug/../../obj/nvm.o
 .debug_loc     0x00000853       0x20 ARM Flash Debug/../../obj/timer.o
 .debug_loc     0x00000873      0x107 ARM Flash Debug/../../obj/uart.o
 .debug_loc     0x0000097a       0x46 ARM Flash Debug/../../obj/assert.o
 .debug_loc     0x000009c0       0x40 ARM Flash Debug/../../obj/backdoor.o
 .debug_loc     0x00000a00       0x40 ARM Flash Debug/../../obj/boot.o
 .debug_loc     0x00000a40       0xef ARM Flash Debug/../../obj/com.o
 .debug_loc     0x00000b2f      0x211 ARM Flash Debug/../../obj/xcp.o

.debug_aranges  0x00000000      0x350
 .debug_aranges
                0x00000000       0x20 ARM Flash Debug/../../obj/main.o
 .debug_aranges
                0x00000020       0x28 ARM Flash Debug/../../obj/cstart.o
 .debug_aranges
                0x00000048       0x78 ARM Flash Debug/../../obj/flash.o
 .debug_aranges
                0x000000c0       0x38 ARM Flash Debug/../../obj/cpu_comp.o
 .debug_aranges
                0x000000f8       0x30 ARM Flash Debug/../../obj/can.o
 .debug_aranges
                0x00000128       0x38 ARM Flash Debug/../../obj/cpu.o
 .debug_aranges
                0x00000160       0x48 ARM Flash Debug/../../obj/nvm.o
 .debug_aranges
                0x000001a8       0x38 ARM Flash Debug/../../obj/timer.o
 .debug_aranges
                0x000001e0       0x40 ARM Flash Debug/../../obj/uart.o
 .debug_aranges
                0x00000220       0x20 ARM Flash Debug/../../obj/assert.o
 .debug_aranges
                0x00000240       0x28 ARM Flash Debug/../../obj/backdoor.o
 .debug_aranges
                0x00000268       0x28 ARM Flash Debug/../../obj/boot.o
 .debug_aranges
                0x00000290       0x50 ARM Flash Debug/../../obj/com.o
 .debug_aranges
                0x000002e0       0x28 ARM Flash Debug/../../obj/cop.o
 .debug_aranges
                0x00000308       0x48 ARM Flash Debug/../../obj/xcp.o

.debug_ranges   0x00000000      0x268
 .debug_ranges  0x00000000       0x10 ARM Flash Debug/../../obj/main.o
 .debug_ranges  0x00000010       0x20 ARM Flash Debug/../../obj/cstart.o
 .debug_ranges  0x00000030       0x68 ARM Flash Debug/../../obj/flash.o
 .debug_ranges  0x00000098       0x28 ARM Flash Debug/../../obj/cpu_comp.o
 .debug_ranges  0x000000c0       0x20 ARM Flash Debug/../../obj/can.o
 .debug_ranges  0x000000e0       0x28 ARM Flash Debug/../../obj/cpu.o
 .debug_ranges  0x00000108       0x38 ARM Flash Debug/../../obj/nvm.o
 .debug_ranges  0x00000140       0x28 ARM Flash Debug/../../obj/timer.o
 .debug_ranges  0x00000168       0x30 ARM Flash Debug/../../obj/uart.o
 .debug_ranges  0x00000198       0x10 ARM Flash Debug/../../obj/assert.o
 .debug_ranges  0x000001a8       0x18 ARM Flash Debug/../../obj/backdoor.o
 .debug_ranges  0x000001c0       0x18 ARM Flash Debug/../../obj/boot.o
 .debug_ranges  0x000001d8       0x40 ARM Flash Debug/../../obj/com.o
 .debug_ranges  0x00000218       0x18 ARM Flash Debug/../../obj/cop.o
 .debug_ranges  0x00000230       0x38 ARM Flash Debug/../../obj/xcp.o

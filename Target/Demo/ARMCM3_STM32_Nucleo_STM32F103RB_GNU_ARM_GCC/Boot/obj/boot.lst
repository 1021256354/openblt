   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"boot.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.BootInit,"ax",%progbits
  19              		.align	2
  20              		.global	BootInit
  21              		.thumb
  22              		.thumb_func
  24              	BootInit:
  25              	.LFB0:
  26              		.file 1 "../../../Source/boot.c"
   1:../../../Source/boot.c **** /************************************************************************************//**
   2:../../../Source/boot.c **** * \file         Source\boot.c
   3:../../../Source/boot.c **** * \brief        Bootloader core module source file.
   4:../../../Source/boot.c **** * \ingroup      Core
   5:../../../Source/boot.c **** * \internal
   6:../../../Source/boot.c **** *----------------------------------------------------------------------------------------
   7:../../../Source/boot.c **** *                          C O P Y R I G H T
   8:../../../Source/boot.c **** *----------------------------------------------------------------------------------------
   9:../../../Source/boot.c **** *   Copyright (c) 2011  by Feaser    http://www.feaser.com    All rights reserved
  10:../../../Source/boot.c **** *
  11:../../../Source/boot.c **** *----------------------------------------------------------------------------------------
  12:../../../Source/boot.c **** *                            L I C E N S E
  13:../../../Source/boot.c **** *----------------------------------------------------------------------------------------
  14:../../../Source/boot.c **** * This file is part of OpenBLT. OpenBLT is free software: you can redistribute it and/or
  15:../../../Source/boot.c **** * modify it under the terms of the GNU General Public License as published by the Free
  16:../../../Source/boot.c **** * Software Foundation, either version 3 of the License, or (at your option) any later
  17:../../../Source/boot.c **** * version.
  18:../../../Source/boot.c **** *
  19:../../../Source/boot.c **** * OpenBLT is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
  20:../../../Source/boot.c **** * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
  21:../../../Source/boot.c **** * PURPOSE. See the GNU General Public License for more details.
  22:../../../Source/boot.c **** *
  23:../../../Source/boot.c **** * You should have received a copy of the GNU General Public License along with OpenBLT.
  24:../../../Source/boot.c **** * If not, see <http://www.gnu.org/licenses/>.
  25:../../../Source/boot.c **** *
  26:../../../Source/boot.c **** * A special exception to the GPL is included to allow you to distribute a combined work 
  27:../../../Source/boot.c **** * that includes OpenBLT without being obliged to provide the source code for any 
  28:../../../Source/boot.c **** * proprietary components. The exception text is included at the bottom of the license
  29:../../../Source/boot.c **** * file <license.html>.
  30:../../../Source/boot.c **** * 
  31:../../../Source/boot.c **** * \endinternal
  32:../../../Source/boot.c **** ****************************************************************************************/
  33:../../../Source/boot.c **** 
  34:../../../Source/boot.c **** /****************************************************************************************
  35:../../../Source/boot.c **** * Include files
  36:../../../Source/boot.c **** ****************************************************************************************/
  37:../../../Source/boot.c **** #include "boot.h"                                /* bootloader generic header          */
  38:../../../Source/boot.c **** 
  39:../../../Source/boot.c **** 
  40:../../../Source/boot.c **** /************************************************************************************//**
  41:../../../Source/boot.c **** ** \brief     Initializes the bootloader core. 
  42:../../../Source/boot.c **** ** \return    none
  43:../../../Source/boot.c **** **
  44:../../../Source/boot.c **** ****************************************************************************************/
  45:../../../Source/boot.c **** void BootInit(void)
  46:../../../Source/boot.c **** {
  27              		.loc 1 46 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 08B5     		push	{r3, lr}
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 3, -8
  34              		.cfi_offset 14, -4
  47:../../../Source/boot.c ****   /* initialize the watchdog */
  48:../../../Source/boot.c ****   CopInit();
  35              		.loc 1 48 0
  36 0002 FFF7FEFF 		bl	CopInit
  37              	.LVL0:
  49:../../../Source/boot.c ****   /* initialize the millisecond timer */
  50:../../../Source/boot.c ****   TimerInit();
  38              		.loc 1 50 0
  39 0006 FFF7FEFF 		bl	TimerInit
  40              	.LVL1:
  51:../../../Source/boot.c ****   /* initialize the non-volatile memory driver */
  52:../../../Source/boot.c ****   NvmInit();
  41              		.loc 1 52 0
  42 000a FFF7FEFF 		bl	NvmInit
  43              	.LVL2:
  53:../../../Source/boot.c ****   #if (BOOT_FILE_SYS_ENABLE > 0)
  54:../../../Source/boot.c ****   /* initialize the file system module */
  55:../../../Source/boot.c ****   FileInit();
  56:../../../Source/boot.c ****   #endif 
  57:../../../Source/boot.c ****   #if (BOOT_COM_ENABLE > 0)
  58:../../../Source/boot.c ****   /* initialize the communication module */
  59:../../../Source/boot.c ****   ComInit();
  44              		.loc 1 59 0
  45 000e FFF7FEFF 		bl	ComInit
  46              	.LVL3:
  60:../../../Source/boot.c ****   #endif
  61:../../../Source/boot.c ****   /* initialize the backdoor entry */
  62:../../../Source/boot.c ****   BackDoorInit();
  47              		.loc 1 62 0
  48 0012 FFF7FEFF 		bl	BackDoorInit
  49              	.LVL4:
  50 0016 08BD     		pop	{r3, pc}
  51              		.cfi_endproc
  52              	.LFE0:
  54              		.section	.text.BootTask,"ax",%progbits
  55              		.align	2
  56              		.global	BootTask
  57              		.thumb
  58              		.thumb_func
  60              	BootTask:
  61              	.LFB1:
  63:../../../Source/boot.c **** } /*** end of BootInit ***/
  64:../../../Source/boot.c **** 
  65:../../../Source/boot.c **** 
  66:../../../Source/boot.c **** /************************************************************************************//**
  67:../../../Source/boot.c **** ** \brief     Task function of the bootloader core that drives the program. 
  68:../../../Source/boot.c **** ** \return    none
  69:../../../Source/boot.c **** **
  70:../../../Source/boot.c **** ****************************************************************************************/
  71:../../../Source/boot.c **** void BootTask(void)
  72:../../../Source/boot.c **** {
  62              		.loc 1 72 0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 0
  65              		@ frame_needed = 0, uses_anonymous_args = 0
  66 0000 08B5     		push	{r3, lr}
  67              		.cfi_def_cfa_offset 8
  68              		.cfi_offset 3, -8
  69              		.cfi_offset 14, -4
  73:../../../Source/boot.c ****   /* service the watchdog */
  74:../../../Source/boot.c ****   CopService();
  70              		.loc 1 74 0
  71 0002 FFF7FEFF 		bl	CopService
  72              	.LVL5:
  75:../../../Source/boot.c ****   /* update the millisecond timer */
  76:../../../Source/boot.c ****   TimerUpdate();
  73              		.loc 1 76 0
  74 0006 FFF7FEFF 		bl	TimerUpdate
  75              	.LVL6:
  77:../../../Source/boot.c ****   #if (BOOT_FILE_SYS_ENABLE > 0)
  78:../../../Source/boot.c ****   /* call worker task for updating firmware from locally attached file storage */
  79:../../../Source/boot.c ****   FileTask();
  80:../../../Source/boot.c ****   #endif /* BOOT_FILE_SYS_ENABLE > 0 */
  81:../../../Source/boot.c ****   #if (BOOT_COM_ENABLE > 0)
  82:../../../Source/boot.c ****   /* process possibly pending communication data */
  83:../../../Source/boot.c ****   ComTask();
  76              		.loc 1 83 0
  77 000a FFF7FEFF 		bl	ComTask
  78              	.LVL7:
  84:../../../Source/boot.c ****   #endif
  85:../../../Source/boot.c ****   /* control the backdoor */
  86:../../../Source/boot.c ****   BackDoorCheck();
  79              		.loc 1 86 0
  80 000e FFF7FEFF 		bl	BackDoorCheck
  81              	.LVL8:
  82 0012 08BD     		pop	{r3, pc}
  83              		.cfi_endproc
  84              	.LFE1:
  86              		.text
  87              	.Letext0:
  88              		.file 2 "../../../Source/cop.h"
  89              		.file 3 "../../../Source/ARMCM3_STM32/timer.h"
  90              		.file 4 "../../../Source/ARMCM3_STM32/nvm.h"
  91              		.file 5 "../../../Source/com.h"
  92              		.file 6 "../../../Source/backdoor.h"
DEFINED SYMBOLS
                            *ABS*:00000000 boot.c
C:\Users\lwngim1\AppData\Local\Temp\ccGYAvWS.s:19     .text.BootInit:00000000 $t
C:\Users\lwngim1\AppData\Local\Temp\ccGYAvWS.s:24     .text.BootInit:00000000 BootInit
C:\Users\lwngim1\AppData\Local\Temp\ccGYAvWS.s:55     .text.BootTask:00000000 $t
C:\Users\lwngim1\AppData\Local\Temp\ccGYAvWS.s:60     .text.BootTask:00000000 BootTask
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
CopInit
TimerInit
NvmInit
ComInit
BackDoorInit
CopService
TimerUpdate
ComTask
BackDoorCheck

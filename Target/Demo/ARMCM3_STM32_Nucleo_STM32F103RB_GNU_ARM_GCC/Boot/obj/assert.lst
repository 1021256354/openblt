   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"assert.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.AssertFailure,"ax",%progbits
  19              		.align	2
  20              		.global	AssertFailure
  21              		.thumb
  22              		.thumb_func
  24              	AssertFailure:
  25              	.LFB0:
  26              		.file 1 "../../../Source/assert.c"
   1:../../../Source/assert.c **** /************************************************************************************//**
   2:../../../Source/assert.c **** * \file         Source\assert.c
   3:../../../Source/assert.c **** * \brief        Bootloader assertion module source file.
   4:../../../Source/assert.c **** * \ingroup      Core
   5:../../../Source/assert.c **** * \internal
   6:../../../Source/assert.c **** *----------------------------------------------------------------------------------------
   7:../../../Source/assert.c **** *                          C O P Y R I G H T
   8:../../../Source/assert.c **** *----------------------------------------------------------------------------------------
   9:../../../Source/assert.c **** *   Copyright (c) 2011  by Feaser    http://www.feaser.com    All rights reserved
  10:../../../Source/assert.c **** *
  11:../../../Source/assert.c **** *----------------------------------------------------------------------------------------
  12:../../../Source/assert.c **** *                            L I C E N S E
  13:../../../Source/assert.c **** *----------------------------------------------------------------------------------------
  14:../../../Source/assert.c **** * This file is part of OpenBLT. OpenBLT is free software: you can redistribute it and/or
  15:../../../Source/assert.c **** * modify it under the terms of the GNU General Public License as published by the Free
  16:../../../Source/assert.c **** * Software Foundation, either version 3 of the License, or (at your option) any later
  17:../../../Source/assert.c **** * version.
  18:../../../Source/assert.c **** *
  19:../../../Source/assert.c **** * OpenBLT is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
  20:../../../Source/assert.c **** * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
  21:../../../Source/assert.c **** * PURPOSE. See the GNU General Public License for more details.
  22:../../../Source/assert.c **** *
  23:../../../Source/assert.c **** * You should have received a copy of the GNU General Public License along with OpenBLT.
  24:../../../Source/assert.c **** * If not, see <http://www.gnu.org/licenses/>.
  25:../../../Source/assert.c **** *
  26:../../../Source/assert.c **** * A special exception to the GPL is included to allow you to distribute a combined work 
  27:../../../Source/assert.c **** * that includes OpenBLT without being obliged to provide the source code for any 
  28:../../../Source/assert.c **** * proprietary components. The exception text is included at the bottom of the license
  29:../../../Source/assert.c **** * file <license.html>.
  30:../../../Source/assert.c **** * 
  31:../../../Source/assert.c **** * \endinternal
  32:../../../Source/assert.c **** ****************************************************************************************/
  33:../../../Source/assert.c **** 
  34:../../../Source/assert.c **** /****************************************************************************************
  35:../../../Source/assert.c **** * Include files
  36:../../../Source/assert.c **** ****************************************************************************************/
  37:../../../Source/assert.c **** #include "boot.h"                                /* bootloader generic header          */
  38:../../../Source/assert.c **** 
  39:../../../Source/assert.c **** 
  40:../../../Source/assert.c **** #ifndef NDEBUG
  41:../../../Source/assert.c **** /****************************************************************************************
  42:../../../Source/assert.c **** * Local data declarations
  43:../../../Source/assert.c **** ****************************************************************************************/
  44:../../../Source/assert.c **** /** \brief Holds the filename in which the assertion occurred. */
  45:../../../Source/assert.c **** static volatile blt_char  *assert_failure_file;
  46:../../../Source/assert.c **** /** \brief Holds the linenumber where the assertion occurred. */
  47:../../../Source/assert.c **** static volatile blt_int32u assert_failure_line;
  48:../../../Source/assert.c **** 
  49:../../../Source/assert.c **** 
  50:../../../Source/assert.c **** /************************************************************************************//**
  51:../../../Source/assert.c **** ** \brief     Called when a runtime assertion failed. It stores information about where 
  52:../../../Source/assert.c **** **            the assertion occurred and halts the software program.
  53:../../../Source/assert.c **** ** \param     file   Name of the source file where the assertion occurred.
  54:../../../Source/assert.c **** ** \param     line   Linenumber in the source file where the assertion occurred.
  55:../../../Source/assert.c **** ** \return    none
  56:../../../Source/assert.c **** **
  57:../../../Source/assert.c **** ****************************************************************************************/
  58:../../../Source/assert.c **** void AssertFailure(blt_char *file, blt_int32u line)
  59:../../../Source/assert.c **** {
  27              		.loc 1 59 0
  28              		.cfi_startproc
  29              		@ Volatile: function does not return.
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 08B5     		push	{r3, lr}
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 3, -8
  36              		.cfi_offset 14, -4
  60:../../../Source/assert.c ****   /* store the file string and line number so that it can be read on a breakpoint*/
  61:../../../Source/assert.c ****   assert_failure_file = file;
  37              		.loc 1 61 0
  38 0002 034B     		ldr	r3, .L4
  39 0004 1860     		str	r0, [r3]
  62:../../../Source/assert.c ****   assert_failure_line = line;
  40              		.loc 1 62 0
  41 0006 034B     		ldr	r3, .L4+4
  42 0008 1960     		str	r1, [r3]
  43              	.LVL1:
  44              	.L2:
  63:../../../Source/assert.c ****   /* hang the software so that it requires a hard reset */
  64:../../../Source/assert.c ****   for(;;) 
  65:../../../Source/assert.c ****   { 
  66:../../../Source/assert.c ****     /* keep servicing the watchdog so that this one does not cause a reset */
  67:../../../Source/assert.c ****     CopService(); 
  45              		.loc 1 67 0 discriminator 1
  46 000a FFF7FEFF 		bl	CopService
  47              	.LVL2:
  68:../../../Source/assert.c ****   }
  48              		.loc 1 68 0 discriminator 1
  49 000e FCE7     		b	.L2
  50              	.L5:
  51              		.align	2
  52              	.L4:
  53 0010 00000000 		.word	.LANCHOR0
  54 0014 00000000 		.word	.LANCHOR1
  55              		.cfi_endproc
  56              	.LFE0:
  58              		.section	.bss.assert_failure_file,"aw",%nobits
  59              		.align	2
  60              		.set	.LANCHOR0,. + 0
  63              	assert_failure_file:
  64 0000 00000000 		.space	4
  65              		.section	.bss.assert_failure_line,"aw",%nobits
  66              		.align	2
  67              		.set	.LANCHOR1,. + 0
  70              	assert_failure_line:
  71 0000 00000000 		.space	4
  72              		.text
  73              	.Letext0:
  74              		.file 2 "../../../Source/ARMCM3_STM32/types.h"
  75              		.file 3 "../../../Source/cop.h"
DEFINED SYMBOLS
                            *ABS*:00000000 assert.c
C:\Users\lwngim1\AppData\Local\Temp\ccr0wxrM.s:19     .text.AssertFailure:00000000 $t
C:\Users\lwngim1\AppData\Local\Temp\ccr0wxrM.s:24     .text.AssertFailure:00000000 AssertFailure
C:\Users\lwngim1\AppData\Local\Temp\ccr0wxrM.s:53     .text.AssertFailure:00000010 $d
C:\Users\lwngim1\AppData\Local\Temp\ccr0wxrM.s:59     .bss.assert_failure_file:00000000 $d
C:\Users\lwngim1\AppData\Local\Temp\ccr0wxrM.s:63     .bss.assert_failure_file:00000000 assert_failure_file
C:\Users\lwngim1\AppData\Local\Temp\ccr0wxrM.s:66     .bss.assert_failure_line:00000000 $d
C:\Users\lwngim1\AppData\Local\Temp\ccr0wxrM.s:70     .bss.assert_failure_line:00000000 assert_failure_line
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
CopService
